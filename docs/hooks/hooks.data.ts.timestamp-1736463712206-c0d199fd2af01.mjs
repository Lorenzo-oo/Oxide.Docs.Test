// util/hooks.ts
import { readFileSync } from "fs";
function getHookJson(filename) {
  const hookData = readFileSync(filename).toString();
  const hooks = JSON.parse(hookData);
  return hooks.Hooks.filter((hook) => hook.Category !== "_Patches" && !hook.HookName.includes("["));
}
function getGroupedHooks() {
  const docsNames = ["docs.json", "docs_core.json"];
  var out = {};
  for (let filename of docsNames) {
    const hooksJson = getHookJson(filename);
    hooksJson.forEach((hook) => {
      if (!out[hook.Category]) {
        out[hook.Category] = {};
      }
      if (!out[hook.Category][hook.HookName]) {
        out[hook.Category][hook.HookName] = [];
      }
      out[hook.Category][hook.HookName].push(hook);
    });
  }
  Object.keys(out).forEach((category) => {
    out[category] = Object.keys(out[category]).sort((a, b) => a.localeCompare(b)).reduce((obj, key) => {
      obj[key] = out[category][key].sort((a, b) => {
        if (a.TargetType === b.TargetType) {
          return a.MethodData.MethodName.localeCompare(b.MethodData.MethodName);
        }
        return a.TargetType.localeCompare(b.TargetType);
      });
      return obj;
    }, {});
  });
  return out;
}
function getHooksSidebar() {
  let data = getGroupedHooks();
  return Object.keys(data).sort().map((category) => {
    return {
      text: category + " (" + Object.keys(data[category]).length + ")",
      collapsed: true,
      items: Object.keys(data[category]).map((hookName) => {
        return {
          text: hookName,
          link: `/hooks/${category.toLowerCase()}/${hookName}`
        };
      })
    };
  });
}

// docs/hooks/hooks.data.ts
var hooks_data_default = {
  load() {
    return getHooksSidebar();
  }
};
export {
  hooks_data_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidXRpbC9ob29rcy50cyIsICJkb2NzL2hvb2tzL2hvb2tzLmRhdGEudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJEOlxcXFxQcm9qZWN0X3ZTdHVkaW9cXFxcT3hpZGVNb2RcXFxcT3hpZGVfRm9ya3NcXFxcT3hpZGUuRG9jc1xcXFx1dGlsXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJEOlxcXFxQcm9qZWN0X3ZTdHVkaW9cXFxcT3hpZGVNb2RcXFxcT3hpZGVfRm9ya3NcXFxcT3hpZGUuRG9jc1xcXFx1dGlsXFxcXGhvb2tzLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9Qcm9qZWN0X3ZTdHVkaW8vT3hpZGVNb2QvT3hpZGVfRm9ya3MvT3hpZGUuRG9jcy91dGlsL2hvb2tzLnRzXCI7aW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSBcImZzXCI7XHJcbmltcG9ydCBJRG9jcyBmcm9tIFwiLi4vZW50aXRpZXMvaG9va3MvZG9jc1wiO1xyXG5pbXBvcnQgSUhvb2sgZnJvbSBcIi4uL2VudGl0aWVzL2hvb2tzL2hvb2tcIjtcclxuXHJcbi8vIFRvZG86IGltcHJvdmUgY29kZSB0byBtZXJnZSBib3RoIEpTT04gZmlsZXMgZG9jcy5qc29uIGFuZCBkb2NzX2NvcmUuanNvblxyXG4vLyB0aGlzIHF1aWNrIGltcGxlbWVudGF0aW9uIGlzIGZvciB0ZXN0LiBcclxuLy8gZG9jc19jb3JlLmpzb24gY29udGFpbiBob29rIGluZm8gZm9yIG94aWRlLmNvZGUsIG94aWRlLmNzaGFycCBhbmQgb3hpZGUucnVzdFxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9va0pzb24oZmlsZW5hbWU6IHN0cmluZykge1xyXG4gIGNvbnN0IGhvb2tEYXRhID0gcmVhZEZpbGVTeW5jKGZpbGVuYW1lKS50b1N0cmluZygpO1xyXG4gIGNvbnN0IGhvb2tzID0gSlNPTi5wYXJzZShob29rRGF0YSkgYXMgSURvY3M7XHJcbiAgcmV0dXJuIGhvb2tzLkhvb2tzLmZpbHRlcihob29rID0+IGhvb2suQ2F0ZWdvcnkgIT09IFwiX1BhdGNoZXNcIiAmJiAhaG9vay5Ib29rTmFtZS5pbmNsdWRlcyhcIltcIikpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JvdXBlZEhvb2tzKCkge1xyXG4gIGNvbnN0IGRvY3NOYW1lczogc3RyaW5nW10gPSBbXCJkb2NzLmpzb25cIiwgXCJkb2NzX2NvcmUuanNvblwiXTtcclxuXHJcbiAgdmFyIG91dCA9IHt9IGFzIHsgW2tleTogc3RyaW5nXTogeyBba2V5OiBzdHJpbmddOiBJSG9va1tdIH0gfTtcclxuXHJcbiAgZm9yIChsZXQgZmlsZW5hbWUgb2YgZG9jc05hbWVzKSB7XHJcblx0Y29uc3QgaG9va3NKc29uID0gZ2V0SG9va0pzb24oZmlsZW5hbWUpO1xyXG5cdGhvb2tzSnNvbi5mb3JFYWNoKChob29rKSA9PiB7XHJcblx0ICBpZiAoIW91dFtob29rLkNhdGVnb3J5XSkge1xyXG5cdCAgICBvdXRbaG9vay5DYXRlZ29yeV0gPSB7fTtcclxuXHQgIH1cclxuIFxyXG5cdCAgaWYgKCFvdXRbaG9vay5DYXRlZ29yeV1baG9vay5Ib29rTmFtZV0pIHtcclxuXHQgICAgb3V0W2hvb2suQ2F0ZWdvcnldW2hvb2suSG9va05hbWVdID0gW107XHJcblx0ICB9XHJcblxyXG5cdCAgb3V0W2hvb2suQ2F0ZWdvcnldW2hvb2suSG9va05hbWVdLnB1c2goaG9vayk7XHJcblx0fSk7XHJcbiAgfVxyXG5cclxuICAvLyBTb3J0IGNhdGVnb3JpZXMsIGhvb2tzIGFuZCBob29rcyBieSBUYXJnZXRUeXBlIGFuZCBNZXRob2REYXRhLk1ldGhvZE5hbWUgdXNpbmcgdG9sb2NhbGVDb21wYXJlXHJcbiAgT2JqZWN0LmtleXMob3V0KS5mb3JFYWNoKChjYXRlZ29yeSkgPT4ge1xyXG4gICAgb3V0W2NhdGVnb3J5XSA9IE9iamVjdC5rZXlzKG91dFtjYXRlZ29yeV0pXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpXHJcbiAgICAgIC5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XHJcbiAgICAgICAgb2JqW2tleV0gPSBvdXRbY2F0ZWdvcnldW2tleV0uc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgaWYgKGEuVGFyZ2V0VHlwZSA9PT0gYi5UYXJnZXRUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLk1ldGhvZERhdGEuTWV0aG9kTmFtZS5sb2NhbGVDb21wYXJlKGIuTWV0aG9kRGF0YS5NZXRob2ROYW1lKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBhLlRhcmdldFR5cGUubG9jYWxlQ29tcGFyZShiLlRhcmdldFR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgIH0sIHt9KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEhvb2tzU2lkZWJhcigpIHtcclxuICBsZXQgZGF0YSA9IGdldEdyb3VwZWRIb29rcygpO1xyXG5cclxuICByZXR1cm4gT2JqZWN0LmtleXMoZGF0YSlcclxuICAgIC5zb3J0KClcclxuICAgIC5tYXAoKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdGV4dDogY2F0ZWdvcnkgKyBcIiAoXCIgKyBPYmplY3Qua2V5cyhkYXRhW2NhdGVnb3J5XSkubGVuZ3RoICsgXCIpXCIsXHJcbiAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxyXG4gICAgICAgIGl0ZW1zOiBPYmplY3Qua2V5cyhkYXRhW2NhdGVnb3J5XSkubWFwKChob29rTmFtZSkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGV4dDogaG9va05hbWUsXHJcbiAgICAgICAgICAgIGxpbms6IGAvaG9va3MvJHtjYXRlZ29yeS50b0xvd2VyQ2FzZSgpfS8ke2hvb2tOYW1lfWAsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pLFxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbn1cclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJEOlxcXFxQcm9qZWN0X3ZTdHVkaW9cXFxcT3hpZGVNb2RcXFxcT3hpZGVfRm9ya3NcXFxcT3hpZGUuRG9jc1xcXFxkb2NzXFxcXGhvb2tzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJEOlxcXFxQcm9qZWN0X3ZTdHVkaW9cXFxcT3hpZGVNb2RcXFxcT3hpZGVfRm9ya3NcXFxcT3hpZGUuRG9jc1xcXFxkb2NzXFxcXGhvb2tzXFxcXGhvb2tzLmRhdGEudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Q6L1Byb2plY3RfdlN0dWRpby9PeGlkZU1vZC9PeGlkZV9Gb3Jrcy9PeGlkZS5Eb2NzL2RvY3MvaG9va3MvaG9va3MuZGF0YS50c1wiO2ltcG9ydCB7IGdldEhvb2tzU2lkZWJhciB9IGZyb20gXCIuLi8uLi91dGlsL2hvb2tzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbG9hZCgpIHtcclxuICAgIHJldHVybiBnZXRIb29rc1NpZGViYXIoKTtcclxuICB9LFxyXG59O1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXVWLFNBQVMsb0JBQW9CO0FBTzdXLFNBQVMsWUFBWSxVQUFrQjtBQUM1QyxRQUFNLFdBQVcsYUFBYSxRQUFRLEVBQUUsU0FBUztBQUNqRCxRQUFNLFFBQVEsS0FBSyxNQUFNLFFBQVE7QUFDakMsU0FBTyxNQUFNLE1BQU0sT0FBTyxVQUFRLEtBQUssYUFBYSxjQUFjLENBQUMsS0FBSyxTQUFTLFNBQVMsR0FBRyxDQUFDO0FBQ2hHO0FBRU8sU0FBUyxrQkFBa0I7QUFDaEMsUUFBTSxZQUFzQixDQUFDLGFBQWEsZ0JBQWdCO0FBRTFELE1BQUksTUFBTSxDQUFDO0FBRVgsV0FBUyxZQUFZLFdBQVc7QUFDakMsVUFBTSxZQUFZLFlBQVksUUFBUTtBQUN0QyxjQUFVLFFBQVEsQ0FBQyxTQUFTO0FBQzFCLFVBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxHQUFHO0FBQ3ZCLFlBQUksS0FBSyxRQUFRLElBQUksQ0FBQztBQUFBLE1BQ3hCO0FBRUEsVUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUUsS0FBSyxRQUFRLEdBQUc7QUFDdEMsWUFBSSxLQUFLLFFBQVEsRUFBRSxLQUFLLFFBQVEsSUFBSSxDQUFDO0FBQUEsTUFDdkM7QUFFQSxVQUFJLEtBQUssUUFBUSxFQUFFLEtBQUssUUFBUSxFQUFFLEtBQUssSUFBSTtBQUFBLElBQzdDLENBQUM7QUFBQSxFQUNBO0FBR0EsU0FBTyxLQUFLLEdBQUcsRUFBRSxRQUFRLENBQUMsYUFBYTtBQUNyQyxRQUFJLFFBQVEsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLENBQUMsRUFDdEMsS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDLEVBQ2pDLE9BQU8sQ0FBQyxLQUFLLFFBQVE7QUFDcEIsVUFBSSxHQUFHLElBQUksSUFBSSxRQUFRLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLE1BQU07QUFDM0MsWUFBSSxFQUFFLGVBQWUsRUFBRSxZQUFZO0FBQ2pDLGlCQUFPLEVBQUUsV0FBVyxXQUFXLGNBQWMsRUFBRSxXQUFXLFVBQVU7QUFBQSxRQUN0RTtBQUNBLGVBQU8sRUFBRSxXQUFXLGNBQWMsRUFBRSxVQUFVO0FBQUEsTUFDaEQsQ0FBQztBQUNELGFBQU87QUFBQSxJQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsRUFDVCxDQUFDO0FBRUQsU0FBTztBQUNUO0FBRU8sU0FBUyxrQkFBa0I7QUFDaEMsTUFBSSxPQUFPLGdCQUFnQjtBQUUzQixTQUFPLE9BQU8sS0FBSyxJQUFJLEVBQ3BCLEtBQUssRUFDTCxJQUFJLENBQUMsYUFBYTtBQUNqQixXQUFPO0FBQUEsTUFDTCxNQUFNLFdBQVcsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsRUFBRSxTQUFTO0FBQUEsTUFDN0QsV0FBVztBQUFBLE1BQ1gsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYTtBQUNuRCxlQUFPO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixNQUFNLFVBQVUsU0FBUyxZQUFZLENBQUMsSUFBSSxRQUFRO0FBQUEsUUFDcEQ7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRixDQUFDO0FBQ0w7OztBQ2xFQSxJQUFPLHFCQUFRO0FBQUEsRUFDYixPQUFPO0FBQ0wsV0FBTyxnQkFBZ0I7QUFBQSxFQUN6QjtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
