// util/nav.ts
import { readdirSync, statSync } from "fs";
import { extname, join } from "path";
import matter from "file:///D:/Project_vStudio/OxideMod/Oxide_Forks/Oxide.Docs/node_modules/gray-matter/index.js";
function getSidebarByPath(dirPath) {
  const unsortedFiles = getNavbarDataFromFolder(dirPath);
  const navbar = sortNavbar(unsortedFiles);
  return formatNavbar(navbar);
}
function getNavbarDataFromFolder(path) {
  const files = readdirSync(path);
  const unsortedFiles = [];
  for (const file of files) {
    const filePath = join(path, file);
    const stat = statSync(filePath);
    if (stat.isDirectory()) {
      const files2 = getNavbarDataFromFolder(filePath);
      const index = files2.find((f) => f.link === `/${filePath.replace(/\\/g, "/").replace("docs/", "")}/index`);
      if (index) {
        unsortedFiles.push({
          title: index.title,
          after: index.after,
          link: index.link.replace("index", ""),
          children: files2.filter((f) => f.link !== index.link)
        });
      } else {
        const niceName = file.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase());
        unsortedFiles.push({
          title: niceName,
          after: 0,
          children: files2
        });
      }
    } else if (extname(file) === ".md") {
      const details = matter.read(filePath);
      unsortedFiles.push({
        title: details.data.title,
        after: details.data.after,
        link: `/${filePath.replace(/\\/g, "/").replace("docs/", "").replace(/\.md$/, "")}`
      });
    }
  }
  return unsortedFiles;
}
function sortNavbar(files) {
  let sortedFiles = [];
  let currentItem = files.find((item) => item.after === 0 || item.after === "index");
  while (currentItem !== void 0) {
    sortedFiles.push(currentItem);
    let nextItemName = currentItem.link?.replace(/\/$/, "").split("/").pop();
    currentItem = files.find((item) => item.after === nextItemName);
  }
  for (const file of sortedFiles) {
    if (file.children) {
      file.children = sortNavbar(file.children);
    }
  }
  return sortedFiles;
}
function formatNavbar(sortedFiles) {
  const navbar = [];
  for (const file of sortedFiles) {
    if (file.children) {
      navbar.push({
        text: file.title,
        link: file.link,
        items: formatNavbar(file.children)
      });
    } else {
      navbar.push({
        text: file.title,
        link: file.link
      });
    }
  }
  return navbar;
}

// docs/guides/guides.data.ts
var guides_data_default = {
  load() {
    return {
      owner: getSidebarByPath("docs/guides/owners/"),
      developer: getSidebarByPath("docs/guides/developers/")
    };
  }
};
export {
  guides_data_default as default
};
//# sourceMappingURL=data:application/json;base64,
